<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	version="2.4"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee   http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
  <display-name>koerp-webapp</display-name>
  
  <!--******************单点登录CAS配置begin ********************-->
 
   <!-- 用于实现单点登出功能  可选 -->
   <listener>
       <listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
   </listener>
 
 
   <!-- 该过滤器用于实现单点登出功能，单点退出配置，一定要放在其他filter之前 可选 -->
   <filter>
       <filter-name>CAS Single Sign Out Filter</filter-name>
       <filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>
       <init-param>
           <param-name>casServerUrlPrefix</param-name>
           <param-value>http://localhost:8080/cas/</param-value>
       </init-param>
   </filter>

   <filter-mapping>
       <filter-name>CAS Single Sign Out Filter</filter-name>
       <url-pattern>/*</url-pattern>
   </filter-mapping>
 
   <!-- 该过滤器负责用户的认证工作，必须 -->
   <filter>
       <filter-name>CASFilter</filter-name>
       <filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class>
       <init-param>
           <!--casServerLoginUrl:cas服务的登陆url -->
           <param-name>casServerLoginUrl</param-name>
           <param-value>http://localhost:8080/cas/login</param-value>
       </init-param>
       <init-param>
           <!--serverName:本项目的ip+port -->
           <param-name>serverName</param-name>
           <param-value>http://localhost:8080</param-value>
       </init-param>
       <init-param>
           <param-name>useSession</param-name>
           <param-value>true</param-value>
       </init-param>
       <init-param>
           <param-name>redirectAfterValidation</param-name>
           <param-value>true</param-value>
       </init-param>
   </filter>
 
   <filter-mapping>
       <filter-name>CASFilter</filter-name>
       <url-pattern>/*</url-pattern>
   </filter-mapping>
 
   <!-- 该过滤器负责对Ticket的校验工作，必须-->
   <filter>
       <filter-name>CAS Validation Filter</filter-name>
       <filter-class>
           org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter
       </filter-class>
       <init-param>
           <param-name>casServerUrlPrefix</param-name>
           <param-value>http://localhost:8080/cas/</param-value>
       </init-param>
       <init-param>
           <param-name>serverName</param-name>
           <param-value>http://localhost:8080</param-value>
       </init-param>
   </filter>
   
   <filter-mapping>
       <filter-name>CAS Validation Filter</filter-name>
       <!-- 对项目中的哪些路径做登录拦截-->
       <url-pattern>/*</url-pattern>
   </filter-mapping>
 
   <!-- 该过滤器对HttpServletRequest请求包装， 可通过HttpServletRequest的getRemoteUser()方法获得登录用户的登录名，可选 -->
   <filter>
       <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>
       <filter-class>
           org.jasig.cas.client.util.HttpServletRequestWrapperFilter
       </filter-class>
   </filter>

   <filter-mapping>
       <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>
       <url-pattern>/*</url-pattern>
   </filter-mapping>
 
   <!-- 该过滤器使得可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。
   比如AssertionHolder.getAssertion().getPrincipal().getName()。 
   这个类把Assertion信息放在ThreadLocal变量中，这样应用程序不在web层也能够获取到当前登录信息 -->
   <filter>
       <filter-name>CAS Assertion Thread Local Filter</filter-name>
       <filter-class>org.jasig.cas.client.util.AssertionThreadLocalFilter</filter-class>
   </filter>

   <filter-mapping>
       <filter-name>CAS Assertion Thread Local Filter</filter-name>
       <url-pattern>/*</url-pattern>
   </filter-mapping>
   <!-- ****************** 单点登录结束 ********************-->

	
	

  <!-- springMVC 配置 -->
  <servlet>
     <servlet-name>spring</servlet-name>
	 <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	 <init-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring-mvc.xml</param-value>
	 </init-param>
	 <load-on-startup>3</load-on-startup>
  </servlet>
  <servlet-mapping>
	<servlet-name>spring</servlet-name>
	<url-pattern>/</url-pattern>
  </servlet-mapping>
  <!-- springMVC 配置 -->
  
  
  <!-- Druid实现监控 -->
  <!-- sql监控 -->
    <servlet>
      <servlet-name>DruidStatView</servlet-name>
      <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
      <!--
            deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。
           	 如果allow没有配置或者为空，则允许所有访问
         -->
        <init-param>
            <param-name>allow</param-name>
            <param-value></param-value>
        </init-param>
        <init-param>
            <param-name>deny</param-name>
            <param-value>127.0.0.1</param-value>
        </init-param>
        <init-param>
            <param-name>resetEnable</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <!-- 用户名 -->
            <param-name>loginUsername</param-name>
            <param-value>admin</param-value>
        </init-param>
        <init-param>
            <!-- 密码 -->
            <param-name>loginPassword</param-name>
            <param-value>admin</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
      <servlet-name>DruidStatView</servlet-name>
      <url-pattern>/druid/*</url-pattern>
    </servlet-mapping>
    <!-- URI监控、Session监控 -->
    <filter>
        <filter-name>DruidWebStatFilter</filter-name>
        <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
        <init-param>
            <param-name>exclusions</param-name>
            <param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
        </init-param>
        <init-param>
            <param-name>profileEnable</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>principalCookieName</param-name>
            <param-value>USER_COOKIE</param-value>
        </init-param>
        <init-param>
            <param-name>principalSessionName</param-name>
            <param-value>USER_SESSION</param-value>
        </init-param>
  </filter>
  <filter-mapping>
        <filter-name>DruidWebStatFilter</filter-name>
        <url-pattern>/*</url-pattern>
  </filter-mapping>
  <!-- Druid实现监控 -->
  
  <context-param>
    <param-name>webAppRootKey</param-name>
    <param-value>koerp-webapp</param-value>
  </context-param>
  
  <!--设置log4j的配置文件位置-->
  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:log4j.properties</param-value>
  </context-param>
  <!--使用监听加载log4j的配置文件-->
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  
  <!-- 项目启动加载spring配置监听器 -->
  <context-param>
  	<param-name>contextConfigLocation</param-name>
	<param-value>classpath:applicationContext*.xml</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <listener>
    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
  </listener>
  <!-- 项目启动加载spring配置监听器 -->
  
  <!-- 系统配置加载初始化监听器 -->
  <listener>
   	<listener-class>com.fsun.web.init.SystemSettingContextListener</listener-class>
  </listener>
  <!-- 系统配置加载初始化监听器 -->
  
  <!-- Shiro配置 -->    
  <filter>    
    <filter-name>shiroFilter</filter-name>    
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>    
  </filter>    
  <filter-mapping>    
    <filter-name>shiroFilter</filter-name>    
    <url-pattern>/*</url-pattern>    
  </filter-mapping>  
  
  <!-- 中文字符过滤filter -->
  <filter>
    <filter-name>Set_Character_Encoding</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
      <init-param>
        <param-name>encoding</param-name>
        <param-value>UTF-8</param-value>
      </init-param>
  </filter>
  <filter-mapping>
  	<filter-name>Set_Character_Encoding</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <!-- 中文字符过滤filter -->
  
  <!-- 分页传参filter -->
  <filter>
  	<filter-name>PageFilter</filter-name>
  	<filter-class>com.fsun.web.filter.PageFilter</filter-class>
  </filter>
  <filter-mapping>
  	<filter-name>PageFilter</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
  <!-- 分页传参filter -->
  
  <!-- 首页 -->
  <welcome-file-list>
	<welcome-file>login.jsp</welcome-file>
  </welcome-file-list>
   <!-- 首页 -->
    <session-config>
        <session-timeout>1000</session-timeout>
    </session-config>
</web-app>
